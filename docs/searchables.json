[{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The Font Software, modified or unmodified, in part or in whole,\n must be distributed entirely under this license, and must not be\n distributed under any other license. The requirement for fonts to\n remain under this license does not apply to any document created\n using the Font Software.", "rendered": "The Font Software, modified or unmodified, in part or in whole,\n must be distributed entirely under this license, and must not be\n distributed under any other license. The requirement for fonts to\n remain under this license does not apply to any document created\n using the Font Software.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The name(s) of the Copyright Holder(s) or the Author(s) of the Font\n Software shall not be used to promote, endorse or advertise any\n Modified Version, except to acknowledge the contribution(s) of the\n Copyright Holder(s) and the Author(s) or with their explicit written\n permission.", "rendered": "The name(s) of the Copyright Holder(s) or the Author(s) of the Font\n Software shall not be used to promote, endorse or advertise any\n Modified Version, except to acknowledge the contribution(s) of the\n Copyright Holder(s) and the Author(s) or with their explicit written\n permission.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "No Modified Version of the Font Software may use the Reserved Font\n Name(s) unless explicit written permission is granted by the corresponding\n Copyright Holder. This restriction only applies to the primary font name as\n presented to the users.", "rendered": "No Modified Version of the Font Software may use the Reserved Font\n Name(s) unless explicit written permission is granted by the corresponding\n Copyright Holder. This restriction only applies to the primary font name as\n presented to the users.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Original or Modified Versions of the Font Software may be bundled,\n redistributed and/or sold with any software, provided that each copy\n contains the above copyright notice and this license. These can be\n included either as stand-alone text files, human-readable headers or\n in the appropriate machine-readable metadata fields within text or\n binary files as long as those fields can be easily viewed by the user.", "rendered": "Original or Modified Versions of the Font Software may be bundled,\n redistributed and/or sold with any software, provided that each copy\n contains the above copyright notice and this license. These can be\n included either as stand-alone text files, human-readable headers or\n in the appropriate machine-readable metadata fields within text or\n binary files as long as those fields can be easily viewed by the user.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Neither the Font Software nor any of its individual components,\n in Original or Modified Versions, may be sold by itself.", "rendered": "Neither the Font Software nor any of its individual components,\n in Original or Modified Versions, may be sold by itself.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "code block", "contents": "DISCLAIMER\n\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.", "rendered": "<pre><code>DISCLAIMER\n\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.</code></pre>", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "This license becomes null and void if any of the above conditions are\nnot met.", "rendered": "This license becomes null and void if any of the above conditions are\nnot met.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Termination", "title": "Termination", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Permission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:", "rendered": "Permission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Permission--amp--Conditions", "title": "Permission &amp; Conditions", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Author&quot; refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.", "rendered": "<code>&quot;Author&quot;</code> refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Modified Version&quot; refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.", "rendered": "<code>&quot;Modified Version&quot;</code> refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Original Version&quot; refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).", "rendered": "<code>&quot;Original Version&quot;</code> refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Reserved Font Name&quot; refers to any names specified as such after the\ncopyright statement(s).", "rendered": "<code>&quot;Reserved Font Name&quot;</code> refers to any names specified as such after the\ncopyright statement(s).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Font Software&quot; refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.", "rendered": "<code>&quot;Font Software&quot;</code> refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Definitions", "title": "Definitions", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded, \nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.", "rendered": "The OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded, \nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.", "rendered": "The goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Preamble", "title": "Preamble", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#SIL-Open-Font-License-v1.1", "title": "SIL Open Font License v1.1", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "", "rendered": "<hr/>", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "This license is copied below, and is also available with a FAQ at:\nhttp://scripts.sil.org/OFL", "rendered": "This license is copied below, and is also available with a FAQ at:\nhttp://scripts.sil.org/OFL", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "This Font Software is licensed under the SIL Open Font License, Version 1.1.", "rendered": "This Font Software is licensed under the SIL Open Font License, Version 1.1.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Copyright 2015-2017, Belleve Invis (belleve@typeof.net).", "rendered": "<hr/><hr/>Copyright 2015-2017, Belleve Invis (belleve@typeof.net).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BELLEVE INVIS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "rendered": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BELLEVE INVIS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:", "rendered": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Copyright (c) 2015-2017 Belleve Invis (belleve@typeof.net).", "rendered": "Copyright (c) 2015-2017 Belleve Invis (belleve@typeof.net).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#", "title": "", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The support code is licensed under Berkeley Software Distribution license.", "rendered": "The support code is licensed under Berkeley Software Distribution license.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The font is licensed under SIL OFL Version 1.1.", "rendered": "The font is licensed under SIL OFL Version 1.1.", "breadcrumb": "LICENSE"},
{"href": "./index.html", "title": "Home", "contents": "Points are expressed as tuples.  Instead of exposing a mouseX and mouseY, there is a mouse, which is a tuple of x and y values.", "rendered": "Points are expressed as tuples.  Instead of exposing a <code>mouseX</code> and <code>mouseY</code>, there is a <code>mouse</code>, which is a tuple of x and y values.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Because of the limitations of Reason, several utility functions that would otherwise accept either an integer or a float now expose a version with an f suffix, which supports floats.  Ex: random vs randomf.", "rendered": "Because of the limitations of Reason, several utility functions that would otherwise accept either an integer or a float now expose a version with an <code>f</code> suffix, which supports floats.  Ex: <code>random</code> vs <code>randomf</code>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The builtin map function is called remap instead to avoid confusion with the well-known List.map function which maps over a list of values. As, according to the Processing docs, this function &quot;Re-maps a number from one range to another.&quot;, this naming seems appropriate.", "rendered": "The builtin <code>map</code> function is called <code>remap</code> instead to avoid confusion with the well-known <code>List.map</code> function which maps over a list of values. As, according to the Processing docs, this function &quot;Re-maps a number from one range to another.&quot;, this naming seems appropriate.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open Reprocessing;\nlet draw = (state, env) => {\n  let w = Env.width(env);\n  print_endline(\"The current width is:\" ++ string_of_int(w))\n};", "rendered": "<pre><code>open Reprocessing;\nlet draw = (state, env) => {\n  let w = Env.width(env);\n  print_endline(\"The current width is:\" ++ string_of_int(w))\n};</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "There are no built-in variables like width and mouseX.  Instead, these are functions that are called, passing in an environment object that is always provided.", "rendered": "There are no built-in variables like <code>width</code> and <code>mouseX</code>.  Instead, these are functions that are called, passing in an environment object that is always provided.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "For state management, we encourage the use of the state value that Reprocessing manages for the user.  To use this, decide on a datatype representing the state and return the initial value from setup.  This will be persisted behind the scenes and passed to every callback (such as draw and mouseDown).  Each callback should return the new value of the state (or the old value if it doesn&#39;t change).", "rendered": "For state management, we encourage the use of the <code>state</code> value that Reprocessing manages for the user.  To use this, decide on a datatype representing the state and return the initial value from <code>setup</code>.  This will be persisted behind the scenes and passed to every callback (such as <code>draw</code> and <code>mouseDown</code>).  Each callback should return the new value of the state (or the old value if it doesn&#39;t change).", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "There is no magic - everything is proper Reason code.  This means that you have to call Reprocessing.run with the functions that you want to use.  You also have a couple of options about which utility modules to open.  See the examples directory for some different ways to do this.  It is recommended to open Reprocessing at the top, and then you can optionally open Draw, Env and Utils to make it look more like Processing code. Alternatively, they can be used directly, as can be seen above.", "rendered": "There is no magic - everything is proper Reason code.  This means that you have to call <code>Reprocessing.run</code> with the functions that you want to use.  You also have a couple of options about which utility modules to open.  See the <code>examples</code> directory for some different ways to do this.  It is recommended to <code>open Reprocessing</code> at the top, and then you can optionally open <code>Draw</code>, <code>Env</code> and <code>Utils</code> to make it look more like Processing code. Alternatively, they can be used directly, as can be seen above.", "breadcrumb": "Home"},
{"href": "./index.html#Projects-using-Reprocessing", "title": "Projects using Reprocessing", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open Reprocessing;\nlet fn = (filename, env) => {\n  let font = Draw.loadFont(~filename, env);\n  Draw.text(~font, ~body=\"Test!!!\", ~pos=(10, 10), env);\n}", "rendered": "<pre><code>open Reprocessing;\nlet fn = (filename, env) => {\n  let font = Draw.loadFont(~filename, env);\n  Draw.text(~font, ~body=\"Test!!!\", ~pos=(10, 10), env);\n}</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The assets folder of this repo also has an example of a font that can be copied to your project and used.  In order to use a font once you have the files:", "rendered": "The assets folder of this repo also has an <a href=\"https://github.com/Schmavery/reprocessing/tree/master/assets/font\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">example</a> of a font that can be copied to your project and used.  In order to use a font once you have the files:", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Check out font-generator for a tool that can take any truetype or opentype font and output font files that Reprocessing can use.", "rendered": "Check out <a href=\"https://github.com/bsansouci/font-generator\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">font-generator</a> for a tool that can take any truetype or opentype font and output font files that Reprocessing can use.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The story for using fonts in your Reprocessing app is still under some development to make it nicer.  Right now we have support for writing text in a font defined in the Angel Code font format. This is basically a bitmap of packed glyph textures along with a text file that describes it.", "rendered": "The story for using fonts in your Reprocessing app is still under some development to make it nicer.  Right now we have support for writing text in a font defined in the <a href=\"http://www.angelcode.com/products/bmfont/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Angel Code font</a> format. This is basically a bitmap of packed glyph textures along with a text file that describes it.", "breadcrumb": "Home"},
{"href": "./index.html#Using-Fonts", "title": "Using Fonts", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open Reprocessing;\nlet draw = (state, env) => {\n  let (x, y) = Env.mouse(env);\n  print_endline(\"The current mouse position is:\" ++ (string_of_int(x) ++ string_of_int(y)))\n};", "rendered": "<pre><code>open Reprocessing;\nlet draw = (state, env) => {\n  let (x, y) = Env.mouse(env);\n  print_endline(\"The current mouse position is:\" ++ (string_of_int(x) ++ string_of_int(y)))\n};</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Some-Differences-from-Processing", "title": "Some Differences from Processing", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "See also FlappyBird or 2048 for slightly bigger examples.", "rendered": "See also <a href=\"https://github.com/Schmavery/FlappyBird\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">FlappyBird</a> or <a href=\"https://github.com/bsansouci/reprocessing-example/tree/2048\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">2048</a> for slightly bigger examples.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Run npm run build:native to build to a native executable and run ./lib/bs/native/index.native.", "rendered": "Run <code>npm run build:native</code> to build to a native executable and run <code>./lib/bs/native/index.native</code>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Run npm run build:bytecode to build to a bytecode executable and run ./lib/bs/bytecode/index.byte.", "rendered": "Run <code>npm run build:bytecode</code> to build to a bytecode executable and run <code>./lib/bs/bytecode/index.byte</code>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "There are a couple demos inside examples. Run npm i to install all deps and npm run build to build to JS (default). Open index.html in safari (or use python -m SimpleHTTPServer 8000 to spawn a static server and go to localhost:8000 in chrome).", "rendered": "There are a couple demos inside <code>examples</code>. Run <code>npm i</code> to install all deps and <code>npm run build</code> to build to JS (default). Open <code>index.html</code> in safari (or use <code>python -m SimpleHTTPServer 8000</code> to spawn a static server and go to <code>localhost:8000</code> in chrome).", "breadcrumb": "Home"},
{"href": "./index.html#Demo", "title": "Demo", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "This will draw a simple red square on a black background.  Compare this to reglexampleproject, which takes 200+ lines to do the exact same thing.  This difference is even more notable on bigger projects.  Check out the code for a draggable red square.", "rendered": "This will draw a simple red square on a black background.  Compare this to <a href=\"https://github.com/bsansouci/reasonglexampleproject/blob/simple/src/index.re\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">reglexampleproject</a>, which takes 200+ lines to do the exact same thing.  This difference is even more notable on bigger projects.  Check out the code for a <a href=\"https://github.com/Schmavery/reprocessing/blob/master/examples/redsquare.re\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">draggable red square</a>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm run build", "rendered": "<pre><code>npm run build</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Build", "title": "Build", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "open Reprocessing;\n\nlet setup = (env) => {\n  Env.size(~width=200, ~height=200, env);\n};\n\nlet draw = (_state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.fill(Constants.red, env);\n  Draw.rect(~pos=(50, 50), ~width=100, ~height=100, env)\n};\n\nrun(~setup, ~draw, ());", "rendered": "<pre><code>open Reprocessing;\n\nlet setup = (env) => {\n  Env.size(~width=200, ~height=200, env);\n};\n\nlet draw = (_state, env) => {\n  Draw.background(Constants.black, env);\n  Draw.fill(Constants.red, env);\n  Draw.rect(~pos=(50, 50), ~width=100, ~height=100, env)\n};\n\nrun(~setup, ~draw, ());</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Example", "title": "Example", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "code block", "contents": "npm install schmavery/reprocessing", "rendered": "<pre><code>npm install schmavery/reprocessing</code></pre>", "breadcrumb": "Home"},
{"href": "./index.html#Getting-Started", "title": "Getting Started", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "See below for projects using Reprocessing!", "rendered": "See <a href=\"#projects-using-reprocessing\" title=\"\">below</a> for projects using Reprocessing!", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The 2nd simplest way to try is to clone reprocessing-example.", "rendered": "The 2nd simplest way to try is to clone <a href=\"https://github.com/bsansouci/reprocessing-example\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">reprocessing-example</a>.", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "The web environment is the simplest way to try reprocessing. (It uses an older verison of the Reason syntax though, we&#39;re working on fixing that).", "rendered": "The <a href=\"https://schmavery.github.io/reprocessing/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">web environment</a> is the simplest way to try reprocessing. (It uses an older verison of the Reason syntax though, we&#39;re working on fixing that).", "breadcrumb": "Home"},
{"href": "./index.html#Example", "title": "Example", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "This is a high-level drawing library, inspired by Processing, allowing you to write code that&#39;ll run on the web (using WebGL) and natively (using OpenGL).", "rendered": "This is a high-level drawing library, inspired by <a href=\"https://processing.org\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Processing</a>, allowing you to write code that&#39;ll run on the web (using WebGL) and natively (using OpenGL).", "breadcrumb": "Home"},
{"href": "./index.html", "title": "Home", "contents": "Build Status\nBuild status", "rendered": "<a href=\"https://travis-ci.org/Schmavery/reprocessing\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://travis-ci.org/Schmavery/reprocessing.svg?branch=master' alt='Build Status' /></a>\n<a href=\"https://ci.appveyor.com/project/Schmavery/reprocessing/branch/master\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\"><img src='https://ci.appveyor.com/api/projects/status/jgaaw641624db0pq/branch/master?svg=true&amp;passingText=windows%20-%20OK&amp;failingText=windows%20-%20Failing' alt='Build status' /></a>", "breadcrumb": "Home"},
{"href": "./index.html#Reprocessing", "title": "Reprocessing", "contents": "", "rendered": "", "breadcrumb": "Home"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectRect", "title": "intersectRectRect", "contents": "intersectRectRect float float float float float float float float bool rect1Pos rect1W rect1H rect2Pos rect2W rect2H", "rendered": "<h4 class='item'>let intersectRectRect = (\n  ~rect1Pos: (float, float),\n  ~rect1W: float,\n  ~rect1H: float,\n  ~rect2Pos: (float, float),\n  ~rect2W: float,\n  ~rect2H: float\n) => bool</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-intersectRectCircle", "title": "intersectRectCircle", "contents": "intersectRectCircle float float float float float float float bool rectPos rectW rectH circlePos circleRad", "rendered": "<h4 class='item'>let intersectRectCircle = (\n  ~rectPos: (float, float),\n  ~rectW: float,\n  ~rectH: float,\n  ~circlePos: (float, float),\n  ~circleRad: float\n) => bool</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-split", "title": "split", "contents": "split string char list string  sep", "rendered": "<h4 class='item'>let split = (string, ~sep: char) => list(string)</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noiseSeed", "title": "noiseSeed", "contents": "noiseSeed int unit ", "rendered": "<h4 class='item'>let noiseSeed = int => unit</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-noise", "title": "noise", "contents": "noise float float float float   ", "rendered": "<h4 class='item'>let noise = (float, float, float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-radians", "title": "radians", "contents": "radians float float ", "rendered": "<h4 class='item'>let radians = float => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-degrees", "title": "degrees", "contents": "degrees float float ", "rendered": "<h4 class='item'>let degrees = float => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-mag", "title": "mag", "contents": "mag int int float ", "rendered": "<h4 class='item'>let mag = (int, int) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-magf", "title": "magf", "contents": "magf float float float ", "rendered": "<h4 class='item'>let magf = (float, float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-dist", "title": "dist", "contents": "dist int int int int float p1 p2", "rendered": "<h4 class='item'>let dist = (~p1: (int, int), ~p2: (int, int)) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-distf", "title": "distf", "contents": "distf float float float float float p1 p2", "rendered": "<h4 class='item'>let distf = (\n  ~p1: (float, float),\n  ~p2: (float, float)\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerpColor", "title": "lerpColor", "contents": "lerpColor colorT colorT float colorT low high value", "rendered": "<h4 class='item'>let lerpColor = (\n  ~low: <a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>,\n  ~high: <a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>,\n  ~value: float\n) => <a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerp", "title": "lerp", "contents": "lerp int int float int low high value", "rendered": "<h4 class='item'>let lerp = (~low: int, ~high: int, ~value: float) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-lerpf", "title": "lerpf", "contents": "lerpf float float float float low high value", "rendered": "<h4 class='item'>let lerpf = (\n  ~low: float,\n  ~high: float,\n  ~value: float\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomGaussian", "title": "randomGaussian", "contents": "randomGaussian unit float ", "rendered": "<h4 class='item'>let randomGaussian = unit => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomSeed", "title": "randomSeed", "contents": "randomSeed int unit ", "rendered": "<h4 class='item'>let randomSeed = int => unit</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-random", "title": "random", "contents": "random int int int min max", "rendered": "<h4 class='item'>let random = (~min: int, ~max: int) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-randomf", "title": "randomf", "contents": "randomf float float float min max", "rendered": "<h4 class='item'>let randomf = (~min: float, ~max: float) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-norm", "title": "norm", "contents": "norm float float float float value low high", "rendered": "<h4 class='item'>let norm = (\n  ~value: float,\n  ~low: float,\n  ~high: float\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remap", "title": "remap", "contents": "remap int int int int int int value low1 high1 low2 high2", "rendered": "<h4 class='item'>let remap = (\n  ~value: int,\n  ~low1: int,\n  ~high1: int,\n  ~low2: int,\n  ~high2: int\n) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-remapf", "title": "remapf", "contents": "remapf float float float float float float value low1 high1 low2 high2", "rendered": "<h4 class='item'>let remapf = (\n  ~value: float,\n  ~low1: float,\n  ~high1: float,\n  ~low2: float,\n  ~high2: float\n) => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-constrain", "title": "constrain", "contents": "constrain amt low high", "rendered": "<h4 class='item'>let constrain = (~amt: 'a, ~low: 'a, ~high: 'a) => 'a</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-pow", "title": "pow", "contents": "pow int int int base exp", "rendered": "<h4 class='item'>let pow = (~base: int, ~exp: int) => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-sq", "title": "sq", "contents": "sq int int ", "rendered": "<h4 class='item'>let sq = int => int</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-round", "title": "round", "contents": "round float float ", "rendered": "<h4 class='item'>let round = float => float</h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-colorf", "title": "colorf", "contents": "colorf float float float float colorT r g b a", "rendered": "<h4 class='item'>let colorf = (\n  ~r: float,\n  ~g: float,\n  ~b: float,\n  ~a: float\n) => <a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#value-color", "title": "color", "contents": "color int int int int colorT r g b a", "rendered": "<h4 class='item'>let color = (~r: int, ~g: int, ~b: int, ~a: int) => <a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html", "title": "Reprocessing_Utils", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html", "title": "Reprocessing_Utils", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Utils.html#Reprocessing_Utils", "title": "Reprocessing_Utils", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Utils"},
{"href": "./api/Reprocessing_Types.html#type-Types.soundT", "title": "Types.soundT", "contents": "soundT soundT", "rendered": "<h4 class='item'>type soundT = <a href=\"./api/Reprocessing_Common.html#type-soundT\" title=\"Reprocessing_Common.soundT\">soundT</a></h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.rectModeT", "title": "Types.rectModeT", "contents": "rectModeT rectModeT", "rendered": "<h4 class='item'>type rectModeT = <a href=\"./api/Reprocessing_Common.html#type-rectModeT\" title=\"Reprocessing_Common.rectModeT\">rectModeT</a></h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.strokeCapT", "title": "Types.strokeCapT", "contents": "strokeCapT strokeCapT", "rendered": "<h4 class='item'>type strokeCapT = <a href=\"./api/Reprocessing_Common.html#type-strokeCapT\" title=\"Reprocessing_Common.strokeCapT\">strokeCapT</a></h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.fontT", "title": "Types.fontT", "contents": "fontT fontT", "rendered": "<h4 class='item'>type fontT = <a href=\"./api/Reprocessing_Font.html#type-fontT\" title=\"Reprocessing_Font.fontT\">fontT</a></h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.imageT", "title": "Types.imageT", "contents": "imageT imageT", "rendered": "<h4 class='item'>type imageT = <a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a></h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.colorT", "title": "Types.colorT", "contents": "colorT colorT", "rendered": "<h4 class='item'>type colorT = <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#type-Types.glEnvT", "title": "Types.glEnvT", "contents": "glEnvT glEnv", "rendered": "<h4 class='item'>type glEnvT = <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a></h4>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#module-Types", "title": "Types", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#module-Types", "title": "Types", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html", "title": "Reprocessing_Types", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html", "title": "Reprocessing_Types", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Types.html#Reprocessing_Types", "title": "Reprocessing_Types", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Types"},
{"href": "./api/Reprocessing_Shaders.html#value-fragmentShaderSource", "title": "fragmentShaderSource", "contents": "fragmentShaderSource string", "rendered": "<h4 class='item'>let fragmentShaderSource = string</h4>", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html#value-vertexShaderSource", "title": "vertexShaderSource", "contents": "vertexShaderSource string", "rendered": "<h4 class='item'>let vertexShaderSource = string</h4>", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html", "title": "Reprocessing_Shaders", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html", "title": "Reprocessing_Shaders", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Shaders.html#Reprocessing_Shaders", "title": "Reprocessing_Shaders", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Shaders"},
{"href": "./api/Reprocessing_Matrix.html#value-matinv", "title": "matinv", "contents": "matinv array float array float ", "rendered": "<h4 class='item'>let matinv = array(float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matptmul", "title": "matptmul", "contents": "matptmul array float float float float float  ", "rendered": "<h4 class='item'>let matptmul = (array(float), (float, float)) => (\n  float,\n  float\n)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matvecmul", "title": "matvecmul", "contents": "matvecmul array float array float unit  ", "rendered": "<h4 class='item'>let matvecmul = (array(float), array(float)) => unit</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-matmatmul", "title": "matmatmul", "contents": "matmatmul array float array float unit  ", "rendered": "<h4 class='item'>let matmatmul = (array(float), array(float)) => unit</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-copyInto", "title": "copyInto", "contents": "copyInto array array unit src dst", "rendered": "<h4 class='item'>let copyInto = (~src: array('a), ~dst: array('a)) => unit</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createShearing", "title": "createShearing", "contents": "createShearing float float array float  ", "rendered": "<h4 class='item'>let createShearing = (float, float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createScaling", "title": "createScaling", "contents": "createScaling float float array float  ", "rendered": "<h4 class='item'>let createScaling = (float, float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createRotation", "title": "createRotation", "contents": "createRotation float array float ", "rendered": "<h4 class='item'>let createRotation = float => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createTranslation", "title": "createTranslation", "contents": "createTranslation float float array float  ", "rendered": "<h4 class='item'>let createTranslation = (float, float) => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-createIdentity", "title": "createIdentity", "contents": "createIdentity unit array float ", "rendered": "<h4 class='item'>let createIdentity = unit => array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#value-identity", "title": "identity", "contents": "identity array float", "rendered": "<h4 class='item'>let identity = array(float)</h4>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html", "title": "Reprocessing_Matrix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html", "title": "Reprocessing_Matrix", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Matrix.html#Reprocessing_Matrix", "title": "Reprocessing_Matrix", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Matrix"},
{"href": "./api/Reprocessing_Internal.html#value-clearImage", "title": "clearImage", "contents": "clearImage imageT glEnv unit  ", "rendered": "<h4 class='item'>let clearImage = (<a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a>, <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawOnImage", "title": "drawOnImage", "contents": "drawOnImage imageT glEnv glEnv  unit   ", "rendered": "<h4 class='item'>let drawOnImage = (<a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a>, <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>, <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a> => 'a) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-createImage", "title": "createImage", "contents": "createImage int int glEnv imageT   ", "rendered": "<h4 class='item'>let createImage = (int, int, <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>) => <a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a></h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-resetSize", "title": "resetSize", "contents": "resetSize glEnv int int unit   ", "rendered": "<h4 class='item'>let resetSize = (<a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>, int, int) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawImageWithMatrixf", "title": "drawImageWithMatrixf", "contents": "drawImageWithMatrixf _imageT float float float float int int int int glEnv unit  x y width height subx suby subw subh ", "rendered": "<h4 class='item'>let drawImageWithMatrixf = (\n  <a href=\"./api/Reprocessing_Common.html#type-_imageT\" title=\"Reprocessing_Common._imageT\">_imageT</a>,\n  ~x: float,\n  ~y: float,\n  ~width: float,\n  ~height: float,\n  ~subx: int,\n  ~suby: int,\n  ~subw: int,\n  ~subh: int,\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawImageWithMatrix", "title": "drawImageWithMatrix", "contents": "drawImageWithMatrix _imageT int int int int int int int int glEnv unit  x y width height subx suby subw subh ", "rendered": "<h4 class='item'>let drawImageWithMatrix = (\n  <a href=\"./api/Reprocessing_Common.html#type-_imageT\" title=\"Reprocessing_Common._imageT\">_imageT</a>,\n  ~x: int,\n  ~y: int,\n  ~width: int,\n  ~height: int,\n  ~subx: int,\n  ~suby: int,\n  ~subw: int,\n  ~subh: int,\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawImage", "title": "drawImage", "contents": "drawImage _imageT float float float float float float float float int int int int glEnv unit  p1 p2 p3 p4 subx suby subw subh ", "rendered": "<h4 class='item'>let drawImage = (\n  <a href=\"./api/Reprocessing_Common.html#type-_imageT\" title=\"Reprocessing_Common._imageT\">_imageT</a>,\n  ~p1: (float, float),\n  ~p2: (float, float),\n  ~p3: (float, float),\n  ~p4: (float, float),\n  ~subx: int,\n  ~suby: int,\n  ~subw: int,\n  ~subh: int,\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-loadImageFromMemory", "title": "loadImageFromMemory", "contents": "loadImageFromMemory glEnv string bool imageT   ", "rendered": "<h4 class='item'>let loadImageFromMemory = (<a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>, string, bool) => <a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a></h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-loadImage", "title": "loadImage", "contents": "loadImage glEnv string bool imageT   ", "rendered": "<h4 class='item'>let loadImage = (<a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>, string, bool) => <a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a></h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawArcStroke", "title": "drawArcStroke", "contents": "drawArcStroke glEnv float float float float float float bool bool array float colorT int unit           ", "rendered": "<h4 class='item'>let drawArcStroke = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  (float, float),\n  float,\n  float,\n  float,\n  float,\n  bool,\n  bool,\n  array(float),\n  <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a>,\n  int\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawEllipse", "title": "drawEllipse", "contents": "drawEllipse glEnv float float float float array float colorT unit      ", "rendered": "<h4 class='item'>let drawEllipse = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  (float, float),\n  float,\n  float,\n  array(float),\n  <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawArc", "title": "drawArc", "contents": "drawArc glEnv float float float float float float bool array float colorT unit         ", "rendered": "<h4 class='item'>let drawArc = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  (float, float),\n  float,\n  float,\n  float,\n  float,\n  bool,\n  array(float),\n  <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawLineWithMatrix", "title": "drawLineWithMatrix", "contents": "drawLineWithMatrix float float float float array float colorT float bool glEnv unit p1 p2 matrix color width project ", "rendered": "<h4 class='item'>let drawLineWithMatrix = (\n  ~p1: (float, float),\n  ~p2: (float, float),\n  ~matrix: array(float),\n  ~color: <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a>,\n  ~width: float,\n  ~project: bool,\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawTriangle", "title": "drawTriangle", "contents": "drawTriangle glEnv float float float float float float colorT unit     color", "rendered": "<h4 class='item'>let drawTriangle = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  (float, float),\n  (float, float),\n  (float, float),\n  ~color: <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-addRectToGlobalBatch", "title": "addRectToGlobalBatch", "contents": "addRectToGlobalBatch glEnv float float float float float float float float colorT unit  bottomRight bottomLeft topRight topLeft color", "rendered": "<h4 class='item'>let addRectToGlobalBatch = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  ~bottomRight: (float, float),\n  ~bottomLeft: (float, float),\n  ~topRight: (float, float),\n  ~topLeft: (float, float),\n  ~color: <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-maybeFlushBatch", "title": "maybeFlushBatch", "contents": "maybeFlushBatch option Reasongl Gl textureT int int glEnv unit texture el vert ", "rendered": "<h4 class='item'>let maybeFlushBatch = (\n  ~texture: option(Reasongl.Gl.textureT),\n  ~el: int,\n  ~vert: int,\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-flushGlobalBatch", "title": "flushGlobalBatch", "contents": "flushGlobalBatch glEnv unit ", "rendered": "<h4 class='item'>let flushGlobalBatch = <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a> => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-drawGeometry", "title": "drawGeometry", "contents": "drawGeometry Reasongl Gl Bigarray t float Reasongl Gl Bigarray float32_elt Reasongl Gl Bigarray t int Reasongl Gl Bigarray int16_unsigned_elt int int Reasongl Gl textureT glEnv unit vertexArray elementArray mode count textureBuffer ", "rendered": "<h4 class='item'>let drawGeometry = (\n  ~vertexArray: Reasongl.Gl.Bigarray.t(\n    float,\n    Reasongl.Gl.Bigarray.float32_elt\n  ),\n  ~elementArray: Reasongl.Gl.Bigarray.t(\n    int,\n    Reasongl.Gl.Bigarray.int16_unsigned_elt\n  ),\n  ~mode: int,\n  ~count: int,\n  ~textureBuffer: Reasongl.Gl.textureT,\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-makeLocalBatch", "title": "makeLocalBatch", "contents": "makeLocalBatch glEnv batchT ", "rendered": "<h4 class='item'>let makeLocalBatch = <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a> => <a href=\"./api/Reprocessing_Common.html#type-batchT\" title=\"Reprocessing_Common.batchT\">batchT</a></h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-createCanvas", "title": "createCanvas", "contents": "createCanvas Reasongl Gl Window t int int glEnv   ", "rendered": "<h4 class='item'>let createCanvas = (Reasongl.Gl.Window.t, int, int) => <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a></h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#value-getProgram", "title": "getProgram", "contents": "getProgram Reasongl Gl contextT string string option Reasongl Gl programT context vertexShader fragmentShader", "rendered": "<h4 class='item'>let getProgram = (\n  ~context: Reasongl.Gl.contextT,\n  ~vertexShader: string,\n  ~fragmentShader: string\n) => option(Reasongl.Gl.programT)</h4>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html", "title": "Reprocessing_Internal", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html", "title": "Reprocessing_Internal", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Internal.html#Reprocessing_Internal", "title": "Reprocessing_Internal", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Internal"},
{"href": "./api/Reprocessing_Hotreload.html#value-checkRebuild", "title": "checkRebuild", "contents": "checkRebuild bool ", "rendered": "<h4 class='item'>let checkRebuild = 'a => bool</h4>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html", "title": "Reprocessing_Hotreload", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#value-NoHotreloading.checkRebuild", "title": "NoHotreloading.checkRebuild", "contents": "checkRebuild bool ", "rendered": "<h4 class='item'>let checkRebuild = 'a => bool</h4>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#module-NoHotreloading", "title": "NoHotreloading", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#module-NoHotreloading", "title": "NoHotreloading", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html", "title": "Reprocessing_Hotreload", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html", "title": "Reprocessing_Hotreload", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Hotreload.html#Reprocessing_Hotreload", "title": "Reprocessing_Hotreload", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Hotreload"},
{"href": "./api/Reprocessing_Font.html#type-fontT", "title": "fontT", "contents": "fontT Pervasives ref option internalType", "rendered": "<h4 class='item'>type fontT = Pervasives.ref(option(<a href=\"./api/Reprocessing_Font.html#type-Font.internalType\" title=\"Font.internalType\">internalType</a>))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.loadDefaultFont", "title": "Font.loadDefaultFont", "contents": "loadDefaultFont glEnv unit ", "rendered": "<h4 class='item'>let loadDefaultFont = <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a> => unit</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.calcStringWidth", "title": "Font.calcStringWidth", "contents": "calcStringWidth glEnv option Pervasives ref option internalType string float   ", "rendered": "<h4 class='item'>let calcStringWidth = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  option(Pervasives.ref(option(<a href=\"./api/Reprocessing_Font.html#type-Font.internalType\">internalType</a>))),\n  string\n) => float</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.drawString", "title": "Font.drawString", "contents": "drawString glEnv option Pervasives ref option internalType string float float unit     ", "rendered": "<h4 class='item'>let drawString = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  option(Pervasives.ref(option(<a href=\"./api/Reprocessing_Font.html#type-Font.internalType\">internalType</a>))),\n  string,\n  float,\n  float\n) => unit</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.drawChar", "title": "Font.drawChar", "contents": "drawChar glEnv internalType option _imageT char option char float float float       ", "rendered": "<h4 class='item'>let drawChar = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  <a href=\"./api/Reprocessing_Font.html#type-Font.internalType\">internalType</a>,\n  option(<a href=\"./api/Reprocessing_Common.html#type-_imageT\" title=\"Reprocessing_Common._imageT\">_imageT</a>),\n  char,\n  option(char),\n  float,\n  float\n) => float</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.getChar", "title": "Font.getChar", "contents": "getChar internalType char charT  ", "rendered": "<h4 class='item'>let getChar = (<a href=\"./api/Reprocessing_Font.html#type-Font.internalType\">internalType</a>, char) => <a href=\"./api/Reprocessing_Font.html#type-Font.charT\">charT</a></h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parseFontFormat", "title": "Font.parseFontFormat", "contents": "parseFontFormat glEnv string bool Pervasives ref option internalType   ", "rendered": "<h4 class='item'>let parseFontFormat = (\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>,\n  string,\n  bool\n) => Pervasives.ref(option(<a href=\"./api/Reprocessing_Font.html#type-Font.internalType\">internalType</a>))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.getCharMapAndKernMap", "title": "Font.getCharMapAndKernMap", "contents": "getCharMapAndKernMap string IntMap t charT IntPairMap t float string float float ", "rendered": "<h4 class='item'>let getCharMapAndKernMap = string => (\n  <a href=\"./api/Reprocessing_Font.html#module-Font.IntMap\">IntMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntMap.t\">t</a>(<a href=\"./api/Reprocessing_Font.html#type-Font.charT\">charT</a>),\n  <a href=\"./api/Reprocessing_Font.html#module-Font.IntPairMap\">IntPairMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntPairMap.t\">t</a>(float),\n  string,\n  float,\n  float\n)</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.replaceFilename", "title": "Font.replaceFilename", "contents": "replaceFilename string string string  ", "rendered": "<h4 class='item'>let replaceFilename = (string, string) => string</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_kern_fmt", "title": "Font.parse_kern_fmt", "contents": "parse_kern_fmt Stream t int IntPairMap t float Stream t IntPairMap t float   ", "rendered": "<h4 class='item'>let parse_kern_fmt = (\n  <a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a>,\n  int,\n  <a href=\"./api/Reprocessing_Font.html#module-Font.IntPairMap\">IntPairMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntPairMap.t\">t</a>(float)\n) => (<a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a>, <a href=\"./api/Reprocessing_Font.html#module-Font.IntPairMap\">IntPairMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntPairMap.t\">t</a>(float))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_char_fmt", "title": "Font.parse_char_fmt", "contents": "parse_char_fmt Stream t int IntMap t charT Stream t IntMap t charT   ", "rendered": "<h4 class='item'>let parse_char_fmt = (<a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a>, int, <a href=\"./api/Reprocessing_Font.html#module-Font.IntMap\">IntMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntMap.t\">t</a>(<a href=\"./api/Reprocessing_Font.html#type-Font.charT\">charT</a>)) => (\n  <a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a>,\n  <a href=\"./api/Reprocessing_Font.html#module-Font.IntMap\">IntMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntMap.t\">t</a>(<a href=\"./api/Reprocessing_Font.html#type-Font.charT\">charT</a>)\n)</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.pop_line", "title": "Font.pop_line", "contents": "pop_line Stream t Stream t ", "rendered": "<h4 class='item'>let pop_line = <a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a> => <a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a></h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_string", "title": "Font.parse_string", "contents": "parse_string Stream t Stream t string ", "rendered": "<h4 class='item'>let parse_string = <a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a> => (<a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a>, string)</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.parse_num", "title": "Font.parse_num", "contents": "parse_num Stream t Stream t float ", "rendered": "<h4 class='item'>let parse_num = <a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a> => (<a href=\"./api/Reprocessing_Common.html#module-Stream\" title=\"Reprocessing_Common.Stream\">Stream</a>.<a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a>, float)</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-Font.defaultFont", "title": "Font.defaultFont", "contents": "defaultFont Pervasives ref option internalType", "rendered": "<h4 class='item'>let defaultFont = Pervasives.ref(option(<a href=\"./api/Reprocessing_Font.html#type-Font.internalType\">internalType</a>))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#type-Font.t", "title": "Font.t", "contents": "t Pervasives ref option internalType", "rendered": "<h4 class='item'>type t = Pervasives.ref(option(<a href=\"./api/Reprocessing_Font.html#type-Font.internalType\">internalType</a>))</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#type-Font.internalType", "title": "Font.internalType", "contents": "internalType chars IntMap t charT kerning IntPairMap t float res float lineHeight float image imageT", "rendered": "<h4 class='item'>type internalType = {\n  chars: <a href=\"./api/Reprocessing_Font.html#module-Font.IntMap\">IntMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntMap.t\">t</a>(<a href=\"./api/Reprocessing_Font.html#type-Font.charT\">charT</a>),\n  kerning: <a href=\"./api/Reprocessing_Font.html#module-Font.IntPairMap\">IntPairMap</a>.<a href=\"./api/Reprocessing_Font.html#type-Font.IntPairMap.t\">t</a>(float),\n  res: float,\n  lineHeight: float,\n  image: <a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a>\n}</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#type-Font.charT", "title": "Font.charT", "contents": "charT x float y float width float height float xoffset float yoffset float xadvance float", "rendered": "<h4 class='item'>type charT = {\n  x: float,\n  y: float,\n  width: float,\n  height: float,\n  xoffset: float,\n  yoffset: float,\n  xadvance: float\n}</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#module-Font", "title": "Font", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#module-Font", "title": "Font", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#value-intCompare", "title": "intCompare", "contents": "intCompare int int int  ", "rendered": "<h4 class='item'>let intCompare = (int, int) => int</h4>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html", "title": "Reprocessing_Font", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html", "title": "Reprocessing_Font", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Font.html#Reprocessing_Font", "title": "Reprocessing_Font", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Font"},
{"href": "./api/Reprocessing_Events.html#value-keycodeMap", "title": "keycodeMap", "contents": "keycodeMap int keycodeT ", "rendered": "<h4 class='item'>let keycodeMap = int => <a href=\"./api/Reprocessing_Events.html#type-keycodeT\">keycodeT</a></h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#type-keycodeT", "title": "keycodeT", "contents": "keycodeT Reasongl Gl Events keycodeT", "rendered": "<h4 class='item'>type keycodeT = \n  | Backspace\n  | Tab\n  | Enter\n  | Escape\n  | Space\n  | Quote\n  | Comma\n  | Minus\n  | Period\n  | Slash\n  | Num_0\n  | Num_1\n  | Num_2\n  | Num_3\n  | Num_4\n  | Num_5\n  | Num_6\n  | Num_7\n  | Num_8\n  | Num_9\n  | Semicolon\n  | Equals\n  | OpenBracket\n  | Backslash\n  | CloseBracket\n  | A\n  | B\n  | C\n  | D\n  | E\n  | F\n  | G\n  | H\n  | I\n  | J\n  | K\n  | L\n  | M\n  | N\n  | O\n  | P\n  | Q\n  | R\n  | S\n  | T\n  | U\n  | V\n  | W\n  | X\n  | Y\n  | Z\n  | Right\n  | Left\n  | Down\n  | Up\n  | LeftCtrl\n  | LeftShift\n  | LeftAlt\n  | LeftOsKey\n  | RightCtrl\n  | RightShift\n  | RightAlt\n  | RightOsKey\n  | CapsLock\n  | Backtick\n  | Nothing\n = Reasongl.Gl.Events.keycodeT</h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#type-stateT", "title": "stateT", "contents": "stateT Reasongl Gl Events stateT", "rendered": "<h4 class='item'>type stateT = | MouseDown | MouseUp\n = Reasongl.Gl.Events.stateT</h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#type-buttonStateT", "title": "buttonStateT", "contents": "buttonStateT Reasongl Gl Events buttonStateT", "rendered": "<h4 class='item'>type buttonStateT = \n  | LeftButton\n  | MiddleButton\n  | RightButton\n = Reasongl.Gl.Events.buttonStateT</h4>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html", "title": "Reprocessing_Events", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html", "title": "Reprocessing_Events", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Events.html#Reprocessing_Events", "title": "Reprocessing_Events", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Events"},
{"href": "./api/Reprocessing_Env.html#value-localizePointf", "title": "localizePointf", "contents": "localizePointf float float glEnvT float float  ", "rendered": "<h4 class='item'>let localizePointf = ((float, float), <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => (\n  float,\n  float\n)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-localizePoint", "title": "localizePoint", "contents": "localizePoint int int glEnvT int int  ", "rendered": "<h4 class='item'>let localizePoint = ((int, int), <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => (int, int)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-deltaTime", "title": "deltaTime", "contents": "deltaTime glEnvT float ", "rendered": "<h4 class='item'>let deltaTime = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => float</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-playSound", "title": "playSound", "contents": "playSound soundT option float option bool glEnvT unit  volume loop ", "rendered": "<h4 class='item'>let playSound = (\n  <a href=\"./api/Reprocessing_Types.html#type-Types.soundT\" title=\"Reprocessing_Types.Types.soundT\">soundT</a>,\n  ~?volume: option(float),\n  ~?loop: option(bool),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-loadSound", "title": "loadSound", "contents": "loadSound string glEnvT soundT  ", "rendered": "<h4 class='item'>let loadSound = (string, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => <a href=\"./api/Reprocessing_Types.html#type-Types.soundT\" title=\"Reprocessing_Types.Types.soundT\">soundT</a></h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-frameCount", "title": "frameCount", "contents": "frameCount glEnvT int ", "rendered": "<h4 class='item'>let frameCount = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-frameRate", "title": "frameRate", "contents": "frameRate glEnvT int ", "rendered": "<h4 class='item'>let frameRate = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-resizeable", "title": "resizeable", "contents": "resizeable bool glEnvT unit  ", "rendered": "<h4 class='item'>let resizeable = (bool, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-size", "title": "size", "contents": "size int int glEnvT unit width height ", "rendered": "<h4 class='item'>let size = (~width: int, ~height: int, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-keyReleased", "title": "keyReleased", "contents": "keyReleased elt glEnv bool  ", "rendered": "<h4 class='item'>let keyReleased = (<a href=\"./api/Reprocessing_Common.html#type-KeySet.elt\" title=\"Reprocessing_Common.KeySet.elt\">elt</a>, <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-keyPressed", "title": "keyPressed", "contents": "keyPressed elt glEnv bool  ", "rendered": "<h4 class='item'>let keyPressed = (<a href=\"./api/Reprocessing_Common.html#type-KeySet.elt\" title=\"Reprocessing_Common.KeySet.elt\">elt</a>, <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-key", "title": "key", "contents": "key elt glEnv bool  ", "rendered": "<h4 class='item'>let key = (<a href=\"./api/Reprocessing_Common.html#type-KeySet.elt\" title=\"Reprocessing_Common.KeySet.elt\">elt</a>, <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>) => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-keyCode", "title": "keyCode", "contents": "keyCode glEnvT keycodeT ", "rendered": "<h4 class='item'>let keyCode = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => <a href=\"./api/Reprocessing_Events.html#type-keycodeT\" title=\"Reprocessing_Events.keycodeT\">keycodeT</a></h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-mousePressed", "title": "mousePressed", "contents": "mousePressed glEnvT bool ", "rendered": "<h4 class='item'>let mousePressed = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => bool</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-pmouse", "title": "pmouse", "contents": "pmouse glEnvT int int ", "rendered": "<h4 class='item'>let pmouse = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => (int, int)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-mouse", "title": "mouse", "contents": "mouse glEnvT int int ", "rendered": "<h4 class='item'>let mouse = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => (int, int)</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-height", "title": "height", "contents": "height glEnvT int ", "rendered": "<h4 class='item'>let height = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#value-width", "title": "width", "contents": "width glEnvT int ", "rendered": "<h4 class='item'>let width = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => int</h4>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html", "title": "Reprocessing_Env", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html", "title": "Reprocessing_Env", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Env.html#Reprocessing_Env", "title": "Reprocessing_Env", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Env"},
{"href": "./api/Reprocessing_Draw.html#value-clearImage", "title": "clearImage", "contents": " Clears image such that isImageDrawnTo returns false.", "rendered": " Clears image such that <code>isImageDrawnTo</code> returns false.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-clearImage", "title": "clearImage", "contents": "clearImage imageT glEnvT unit  ", "rendered": "<h4 class='item'>let clearImage = (<a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-isImageDrawnTo", "title": "isImageDrawnTo", "contents": "Checks whether the given image has been drawn to since created or since last time clearImage\nwas called. This is useful when using images as a caching mechanism, to check if the image is\nup to date.", "rendered": "Checks whether the given image has been drawn to since created or since last time clearImage\nwas called. This is useful when using images as a caching mechanism, to check if the image is\nup to date.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-isImageDrawnTo", "title": "isImageDrawnTo", "contents": "isImageDrawnTo imageT bool ", "rendered": "<h4 class='item'>let isImageDrawnTo = <a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a> => bool</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-createImage", "title": "createImage", "contents": " Returns a new image which can be drawn to.", "rendered": " Returns a new image which can be drawn to.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-createImage", "title": "createImage", "contents": "createImage int int glEnvT imageT width height ", "rendered": "<h4 class='item'>let createImage = (\n  ~width: int,\n  ~height: int,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => <a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a></h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-withImage", "title": "withImage", "contents": "Makes draw calls inside the callback draw to the given image instead of to the screen.\nThe callback is called with a new env which will make all draw calls done inside the callback\ndraw on the image instead of the main canvas.\nThis is useful to basically cache draw calls onto an image which can then be drawn to the\nscreen very cheaply at any point after.", "rendered": "Makes draw calls inside the callback draw to the given image instead of to the screen.\nThe callback is called with a new env which will make all draw calls done inside the callback\ndraw on the image instead of the main canvas.\nThis is useful to basically cache draw calls onto an image which can then be drawn to the\nscreen very cheaply at any point after.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-withImage", "title": "withImage", "contents": "withImage imageT glEnvT glEnvT unit  unit   ", "rendered": "<h4 class='item'>let withImage = (<a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-textWidth", "title": "textWidth", "contents": "Calculates width of text using a specific font.\nThe font should be loaded using the loadFont function.", "rendered": "Calculates width of text using a specific font.\nThe font should be loaded using the <code>loadFont</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-textWidth", "title": "textWidth", "contents": "textWidth option fontT string glEnvT int font body ", "rendered": "<h4 class='item'>let textWidth = (\n  ~?font: option(<a href=\"./api/Reprocessing_Font.html#type-fontT\" title=\"Reprocessing_Font.fontT\">fontT</a>),\n  ~body: string,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => int</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-bezier", "title": "bezier", "contents": "Draws a Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The parameter p1 specifies the\nfirst anchor point and the last parameter specifies the other anchor\npoint. The middle parameters p2 and p3 specify the control points\nwhich define the shape of the curve. Bezier curves were developed\nby French engineer Pierre Bezier.", "rendered": "Draws a Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The parameter p1 specifies the\nfirst anchor point and the last parameter specifies the other anchor\npoint. The middle parameters p2 and p3 specify the control points\nwhich define the shape of the curve. Bezier curves were developed\nby French engineer Pierre Bezier.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-bezier", "title": "bezier", "contents": "bezier float float float float float float float float glEnvT unit p1 p2 p3 p4 ", "rendered": "<h4 class='item'>let bezier = (\n  ~p1: (float, float),\n  ~p2: (float, float),\n  ~p3: (float, float),\n  ~p4: (float, float),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode(Radius) also uses the position of rect() as the shape&#39;s center point,\nbut uses the third and fourth parameters to specify half of the shapes&#39;s width\nand height.", "rendered": "rectMode(Radius) also uses the position of rect() as the shape&#39;s center point,\nbut uses the third and fourth parameters to specify half of the shapes&#39;s width\nand height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode(Center) interprets the position of rect() as the shape&#39;s center point,\nwhile the third and fourth parameters are its width and height.", "rendered": "rectMode(Center) interprets the position of rect() as the shape&#39;s center point,\nwhile the third and fourth parameters are its width and height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "The default mode is rectMode(Corner), which interprets the position of rect()\nas the upper-left corner of the shape, while the third and fourth parameters\nare its width and height.", "rendered": "The default mode is rectMode(Corner), which interprets the position of rect()\nas the upper-left corner of the shape, while the third and fourth parameters\nare its width and height.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "Sets the style to modify the location from which rectangles are drawn by\nchanging the way in which parameters given to rect() and rectf() are intepreted.", "rendered": "Sets the style to modify the location from which rectangles are drawn by\nchanging the way in which parameters given to rect() and rectf() are intepreted.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectMode", "title": "rectMode", "contents": "rectMode rectModeT glEnvT unit  ", "rendered": "<h4 class='item'>let rectMode = (<a href=\"./api/Reprocessing_Types.html#type-Types.rectModeT\" title=\"Reprocessing_Types.Types.rectModeT\">rectModeT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popMatrix", "title": "popMatrix", "contents": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires\nunderstanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to\nthe stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in\nconjuction with the other transformation methods and may be embedded to control the scope of the transformations.", "rendered": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires\nunderstanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to\nthe stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in\nconjuction with the other transformation methods and may be embedded to control the scope of the transformations.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popMatrix", "title": "popMatrix", "contents": "popMatrix glEnvT unit ", "rendered": "<h4 class='item'>let popMatrix = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushMatrix", "title": "pushMatrix", "contents": "Pushes the current transformation matrix onto the matrix stack. Understanding pushMatrix() and popMatrix()\nrequires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate\nsystem to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are\nused in conjuction with the other transformation methods and may be embedded to control the scope of\nthe transformations.", "rendered": "Pushes the current transformation matrix onto the matrix stack. Understanding pushMatrix() and popMatrix()\nrequires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate\nsystem to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are\nused in conjuction with the other transformation methods and may be embedded to control the scope of\nthe transformations.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushMatrix", "title": "pushMatrix", "contents": "pushMatrix glEnvT unit ", "rendered": "<h4 class='item'>let pushMatrix = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-shear", "title": "shear", "contents": "The shear() function shears the matrix along the axes the amount\nspecified by the angle parameters. Angles should be specified in radians\n(values from 0 to PI*2) or converted to radians with the Utils.radians()\nfunction.", "rendered": "The shear() function shears the matrix along the axes the amount\nspecified by the angle parameters. Angles should be specified in radians\n(values from 0 to PI*2) or converted to radians with the Utils.radians()\nfunction.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-shear", "title": "shear", "contents": "shear float float glEnvT unit x y ", "rendered": "<h4 class='item'>let shear = (~x: float, ~y: float, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-scale", "title": "scale", "contents": "The scale() function increases or decreases the size of a shape by expanding\nand contracting vertices.", "rendered": "The scale() function increases or decreases the size of a shape by expanding\nand contracting vertices.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-scale", "title": "scale", "contents": "scale float float glEnvT unit x y ", "rendered": "<h4 class='item'>let scale = (~x: float, ~y: float, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "Technically, rotate multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by pushMatrix\nand popMatrix.", "rendered": "Technically, <code>rotate</code> multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by <code>pushMatrix</code>\nand <code>popMatrix</code>.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "The coordinates are always rotated around their relative position to the\norigin. Positive numbers rotate objects in a clockwise direction and\nnegative numbers rotate in the couterclockwise direction. Transformations\napply to everything that happens afterward, and subsequent calls to the\nfunction compound the effect. For example, calling\nrotate Constants.pi/2. env once and then calling rotate Constants.pi/2. env\na second time is the same as a single rotate Constants.pi env. All\ntranformations are reset when draw begins again.", "rendered": "The coordinates are always rotated around their relative position to the\norigin. Positive numbers rotate objects in a clockwise direction and\nnegative numbers rotate in the couterclockwise direction. Transformations\napply to everything that happens afterward, and subsequent calls to the\nfunction compound the effect. For example, calling\n<code>rotate Constants.pi/2. env</code> once and then calling <code>rotate Constants.pi/2. env</code>\na second time is the same as a single <code>rotate Constants.pi env</code>. All\ntranformations are reset when <code>draw</code> begins again.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "Rotates the amount specified by the angle parameter. Angles must be\nspecified in radians (values from 0 to two_pi), or they can be converted\nfrom degrees to radians with the radians function.", "rendered": "Rotates the amount specified by the angle parameter. Angles must be\nspecified in radians (values from 0 to two_pi), or they can be converted\nfrom degrees to radians with the <code>radians</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rotate", "title": "rotate", "contents": "rotate float glEnvT unit  ", "rendered": "<h4 class='item'>let rotate = (float, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": "Transformations are cumulative and apply to everything that happens\nafter and subsequent calls to the function accumulates the effect.\nFor example, calling translate dx::50 dy::0 env and then\ntranslate dx::20 dy::0 env is the same as translate dx::70 dy::0 env.\nIf translate is called within draw, the transformation is reset\nwhen the loop begins again. This function can be further controlled\nby using pushMatrix and popMatrix.", "rendered": "Transformations are cumulative and apply to everything that happens\nafter and subsequent calls to the function accumulates the effect.\nFor example, calling <code>translate dx::50 dy::0 env</code> and then\n<code>translate dx::20 dy::0 env</code> is the same as <code>translate dx::70 dy::0 env</code>.\nIf <code>translate</code> is called within <code>draw</code>, the transformation is reset\nwhen the loop begins again. This function can be further controlled\nby using <code>pushMatrix</code> and <code>popMatrix</code>.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": "Specifies an amount to displace objects within the display window.\nThe dx parameter specifies left/right translation, the dy parameter\nspecifies up/down translation.", "rendered": "Specifies an amount to displace objects within the display window.\nThe dx parameter specifies left/right translation, the dy parameter\nspecifies up/down translation.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-translate", "title": "translate", "contents": "translate float float glEnvT unit x y ", "rendered": "<h4 class='item'>let translate = (~x: float, ~y: float, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": "This function is useful for a spritesheet-style of\ndrawing strategy.", "rendered": "This function is useful for a spritesheet-style of\ndrawing strategy.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": "The subImagef function draws a section of an image to the\ndisplay window. The image should be loaded using the\nloadImage function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "rendered": "The <code>subImagef</code> function draws a section of an image to the\ndisplay window. The image should be loaded using the\n<code>loadImage</code> function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImagef", "title": "subImagef", "contents": "subImagef imageT float float float float int int int int glEnvT unit  pos width height texPos texWidth texHeight ", "rendered": "<h4 class='item'>let subImagef = (\n  <a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a>,\n  ~pos: (float, float),\n  ~width: float,\n  ~height: float,\n  ~texPos: (int, int),\n  ~texWidth: int,\n  ~texHeight: int,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": "This function is useful for a spritesheet-style of\ndrawing strategy.", "rendered": "This function is useful for a spritesheet-style of\ndrawing strategy.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": "The subImage function draws a section of an image to the\ndisplay window. The image should be loaded using the\nloadImage function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "rendered": "The <code>subImage</code> function draws a section of an image to the\ndisplay window. The image should be loaded using the\n<code>loadImage</code> function. The image is displayed at the size\nspecified by width and height.  texPos, texWidth, and\ntexHeight describe the section of the full image that\nshould be drawn.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-subImage", "title": "subImage", "contents": "subImage imageT int int int int int int int int glEnvT unit  pos width height texPos texWidth texHeight ", "rendered": "<h4 class='item'>let subImage = (\n  <a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a>,\n  ~pos: (int, int),\n  ~width: int,\n  ~height: int,\n  ~texPos: (int, int),\n  ~texWidth: int,\n  ~texHeight: int,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-image", "title": "image", "contents": "The image function draws an image to the display window.\nThe image should be loaded using the loadImage function.\nThe image is displayed at its original size unless width and\nheight are optionally specified.", "rendered": "The <code>image</code> function draws an image to the display window.\nThe image should be loaded using the <code>loadImage</code> function.\nThe image is displayed at its original size unless width and\nheight are optionally specified.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-image", "title": "image", "contents": "image imageT int int option int option int glEnvT unit  pos width height ", "rendered": "<h4 class='item'>let image = (\n  <a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a>,\n  ~pos: (int, int),\n  ~?width: option(int),\n  ~?height: option(int),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadImage", "title": "loadImage", "contents": "Loads an image and returns a handle to it. This will lazily load and\nattempting to draw an image that has not finished loading will result\nin nothing being drawn.\nIn general, all images should be loaded in setup to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the image, it will use\nGL_NEAREST (you want this setting if your image is meant to look\npixelated)", "rendered": "Loads an image and returns a handle to it. This will lazily load and\nattempting to draw an image that has not finished loading will result\nin nothing being drawn.\nIn general, all images should be loaded in <code>setup</code> to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the image, it will use\nGL_NEAREST (you want this setting if your image is meant to look\npixelated)", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadImage", "title": "loadImage", "contents": "loadImage string option bool glEnvT imageT filename isPixel ", "rendered": "<h4 class='item'>let loadImage = (\n  ~filename: string,\n  ~?isPixel: option(bool),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => <a href=\"./api/Reprocessing_Types.html#type-Types.imageT\" title=\"Reprocessing_Types.Types.imageT\">imageT</a></h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "code block", "contents": "Draw.background(Constants.white, env);\ntext(~body=\"Hello folks\", ~pos=(5, 40), env);", "rendered": "<pre><code>Draw.background(Constants.white, env);\ntext(~body=\"Hello folks\", ~pos=(5, 40), env);</code></pre>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-text", "title": "text", "contents": "To use a font, use loadFont in your setup() function. If you don&#39;t specify a font, the default font is used.", "rendered": "To use a font, use <a href='#value-loadFont'>loadFont</a> in your <code>setup()</code> function. If you don&#39;t specify a font, the default font is used.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-text", "title": "text", "contents": "Draws text to the screen.", "rendered": "Draws text to the screen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-text", "title": "text", "contents": "text option fontT string int int glEnvT unit font body pos ", "rendered": "<h4 class='item'>let text = (\n  ~?font: option(<a href=\"./api/Reprocessing_Font.html#type-fontT\" title=\"Reprocessing_Font.fontT\">fontT</a>),\n  ~body: string,\n  ~pos: (int, int),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadFont", "title": "loadFont", "contents": "Loads a font and returns a handle to it. This will lazily load and\nattempting to draw an font that has not finished loading will result\nin nothing being drawn.\nIn general, all fonts should be loaded in setup to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the font, it will use\nGL_NEAREST (you want this setting if your font is meant to look\npixelated)", "rendered": "Loads a font and returns a handle to it. This will lazily load and\nattempting to draw an font that has not finished loading will result\nin nothing being drawn.\nIn general, all fonts should be loaded in <code>setup</code> to preload them at\nthe start of the program.\nIf isPixel is set to true, then when scaling the font, it will use\nGL_NEAREST (you want this setting if your font is meant to look\npixelated)", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-loadFont", "title": "loadFont", "contents": "loadFont string option bool glEnvT fontT filename isPixel ", "rendered": "<h4 class='item'>let loadFont = (\n  ~filename: string,\n  ~?isPixel: option(bool),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => <a href=\"./api/Reprocessing_Font.html#type-fontT\" title=\"Reprocessing_Font.fontT\">fontT</a></h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "rendered": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": "The pushStyle function saves the current style settings and\npopStyle restores the prior settings; these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with pushStyle, it builds on the\ncurrent style information. The pushStyle and popStyle functions can be\nembedded to provide more control.", "rendered": "The <code>pushStyle</code> function saves the current style settings and\n<code>popStyle</code> restores the prior settings; these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with <code>pushStyle</code>, it builds on the\ncurrent style information. The <code>pushStyle</code> and <code>popStyle</code> functions can be\nembedded to provide more control.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-popStyle", "title": "popStyle", "contents": "popStyle glEnvT unit ", "rendered": "<h4 class='item'>let popStyle = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "rendered": "The style information controlled by the following functions are included in\nthe style: fill, stroke, strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": "The pushStyle function saves the current style settings and popStyle\nrestores the prior settings. Note that these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with pushStyle, it builds on the\ncurrent style information. The pushStyle and popStyle functions can be\nembedded to provide more control.", "rendered": "The <code>pushStyle</code> function saves the current style settings and <code>popStyle</code>\nrestores the prior settings. Note that these functions are always used\ntogether. They allow you to change the style settings and later return to\nwhat you had. When a new style is started with <code>pushStyle</code>, it builds on the\ncurrent style information. The <code>pushStyle</code> and <code>popStyle</code> functions can be\nembedded to provide more control.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pushStyle", "title": "pushStyle", "contents": "pushStyle glEnvT unit ", "rendered": "<h4 class='item'>let pushStyle = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noTint", "title": "noTint", "contents": "Removes the current fill value for displaying images and reverts to displaying\nimages with their original hues.", "rendered": "Removes the current fill value for displaying images and reverts to displaying\nimages with their original hues.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noTint", "title": "noTint", "contents": "noTint glEnvT unit ", "rendered": "<h4 class='item'>let noTint = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-tint", "title": "tint", "contents": "Sets the fill value for displaying images. Images can be tinted to specified colors\nor made transparent by including an alpha value.", "rendered": "Sets the fill value for displaying images. Images can be tinted to specified colors\nor made transparent by including an alpha value.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-tint", "title": "tint", "contents": "tint colorT glEnvT unit  ", "rendered": "<h4 class='item'>let tint = (<a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeCap", "title": "strokeCap", "contents": "Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded.", "rendered": "Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeCap", "title": "strokeCap", "contents": "strokeCap strokeCapT glEnvT unit  ", "rendered": "<h4 class='item'>let strokeCap = (<a href=\"./api/Reprocessing_Types.html#type-Types.strokeCapT\" title=\"Reprocessing_Types.Types.strokeCapT\">strokeCapT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeWeight", "title": "strokeWeight", "contents": "Sets the width of the stroke used for lines, points, and the border around\nshapes. All widths are set in units of pixels.", "rendered": "Sets the width of the stroke used for lines, points, and the border around\nshapes. All widths are set in units of pixels.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-strokeWeight", "title": "strokeWeight", "contents": "strokeWeight int glEnvT unit  ", "rendered": "<h4 class='item'>let strokeWeight = (int, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noStroke", "title": "noStroke", "contents": "Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.", "rendered": "Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noStroke", "title": "noStroke", "contents": "noStroke glEnvT unit ", "rendered": "<h4 class='item'>let noStroke = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-stroke", "title": "stroke", "contents": " Sets the color used to draw lines and borders around shapes. ", "rendered": " Sets the color used to draw lines and borders around shapes. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-stroke", "title": "stroke", "contents": "stroke colorT glEnvT unit  ", "rendered": "<h4 class='item'>let stroke = (<a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noFill", "title": "noFill", "contents": "Disables filling geometry. If both noStroke and noFill are called,\nnothing will be drawn to the screen.", "rendered": "Disables filling geometry. If both <code>noStroke</code> and <code>noFill</code> are called,\nnothing will be drawn to the screen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-noFill", "title": "noFill", "contents": "noFill glEnvT unit ", "rendered": "<h4 class='item'>let noFill = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-fill", "title": "fill", "contents": " Sets the color used to fill shapes.", "rendered": " Sets the color used to fill shapes.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-fill", "title": "fill", "contents": "fill colorT glEnvT unit  ", "rendered": "<h4 class='item'>let fill = (<a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-curve", "title": "curve", "contents": "Draws a curved line on the screen. The first parameter specifies\nthe beginning control point and the last parameter specifies the ending\ncontrol point. The middle parameters specify the start and stop of the curve.", "rendered": "Draws a curved line on the screen. The first parameter specifies\nthe beginning control point and the last parameter specifies the ending\ncontrol point. The middle parameters specify the start and stop of the curve.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-curve", "title": "curve", "contents": "curve float float float float float float float float glEnv unit     ", "rendered": "<h4 class='item'>let curve = (\n  (float, float),\n  (float, float),\n  (float, float),\n  (float, float),\n  <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arcf", "title": "arcf", "contents": "Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "rendered": "Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arcf", "title": "arcf", "contents": "arcf float float float float float float bool bool glEnvT unit center radx rady start stop isOpen isPie ", "rendered": "<h4 class='item'>let arcf = (\n  ~center: (float, float),\n  ~radx: float,\n  ~rady: float,\n  ~start: float,\n  ~stop: float,\n  ~isOpen: bool,\n  ~isPie: bool,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": "This is the same as arcf, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>arcf</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": "Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "rendered": "Draws an arc to the screen. Arcs are drawn along the outer edge of an\nellipse defined by the center, radx, and rady parameters. Use the\nstart and stop parameters to specify the angles (in radians) at which\nto draw the arc. isPie defines whether or not lines should be drawn to\nthe center at the start and stop points of the arc rather than simply\nconnecting the points.  If isOpen is true, no line will be drawn other\nthan the arc between start and stop.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-arc", "title": "arc", "contents": "arc int int int int float float bool bool glEnvT unit center radx rady start stop isOpen isPie ", "rendered": "<h4 class='item'>let arc = (\n  ~center: (int, int),\n  ~radx: int,\n  ~rady: int,\n  ~start: float,\n  ~stop: float,\n  ~isOpen: bool,\n  ~isPie: bool,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-trianglef", "title": "trianglef", "contents": " A triangle is a plane created by connecting three points. ", "rendered": " A triangle is a plane created by connecting three points. ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-trianglef", "title": "trianglef", "contents": "trianglef float float float float float float glEnvT unit p1 p2 p3 ", "rendered": "<h4 class='item'>let trianglef = (\n  ~p1: (float, float),\n  ~p2: (float, float),\n  ~p3: (float, float),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": "This is the same as trianglef, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>trianglef</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": "A triangle is a plane created by connecting three points.", "rendered": "A triangle is a plane created by connecting three points.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-triangle", "title": "triangle", "contents": "triangle int int int int int int glEnvT unit p1 p2 p3 ", "rendered": "<h4 class='item'>let triangle = (\n  ~p1: (int, int),\n  ~p2: (int, int),\n  ~p3: (int, int),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixelf", "title": "pixelf", "contents": " Adds a single point with a radius defined by strokeWeight ", "rendered": " Adds a single point with a radius defined by strokeWeight ", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixelf", "title": "pixelf", "contents": "pixelf float float colorT glEnvT unit pos color ", "rendered": "<h4 class='item'>let pixelf = (\n  ~pos: (float, float),\n  ~color: <a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": "This is the same as pixelf, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>pixelf</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": "Adds a single point with a radius defined by strokeWeight", "rendered": "Adds a single point with a radius defined by strokeWeight", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-pixel", "title": "pixel", "contents": "pixel int int colorT glEnvT unit pos color ", "rendered": "<h4 class='item'>let pixel = (\n  ~pos: (int, int),\n  ~color: <a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quadf", "title": "quadf", "contents": "A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "rendered": "A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quadf", "title": "quadf", "contents": "quadf float float float float float float float float glEnvT unit p1 p2 p3 p4 ", "rendered": "<h4 class='item'>let quadf = (\n  ~p1: (float, float),\n  ~p2: (float, float),\n  ~p3: (float, float),\n  ~p4: (float, float),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": "This is the same as quadf, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>quadf</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": "A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "rendered": "A quad is a quadrilateral, a four sided polygon. It is similar to a\nrectangle, but the angles between its edges are not constrained to ninety\ndegrees. The parameter p1 sets the first vertex and the subsequest points\nshould proceed clockwise or counter-clockwise around the defined shape.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-quad", "title": "quad", "contents": "quad int int int int int int int int glEnvT unit p1 p2 p3 p4 ", "rendered": "<h4 class='item'>let quad = (\n  ~p1: (int, int),\n  ~p2: (int, int),\n  ~p3: (int, int),\n  ~p4: (int, int),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipsef", "title": "ellipsef", "contents": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "rendered": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipsef", "title": "ellipsef", "contents": "ellipsef float float float float glEnvT unit center radx rady ", "rendered": "<h4 class='item'>let ellipsef = (\n  ~center: (float, float),\n  ~radx: float,\n  ~rady: float,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": "This is the same as ellipsef, but converts all its integer arguments to\nfloats as a convenience.", "rendered": "This is the same as <code>ellipsef</code>, but converts all its integer arguments to\nfloats as a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "rendered": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-ellipse", "title": "ellipse", "contents": "ellipse int int int int glEnvT unit center radx rady ", "rendered": "<h4 class='item'>let ellipse = (\n  ~center: (int, int),\n  ~radx: int,\n  ~rady: int,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-linef", "title": "linef", "contents": "Draws a line (a direct path between two points) to the screen.\nTo color a line, use the stroke function. A line cannot be filled,\ntherefore the fill function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe strokeWeight function.", "rendered": "Draws a line (a direct path between two points) to the screen.\nTo color a line, use the <code>stroke</code> function. A line cannot be filled,\ntherefore the <code>fill</code> function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe <code>strokeWeight</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-linef", "title": "linef", "contents": "linef float float float float glEnvT unit p1 p2 ", "rendered": "<h4 class='item'>let linef = (\n  ~p1: (float, float),\n  ~p2: (float, float),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": "This is the same as linef, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>linef</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": "Draws a line (a direct path between two points) to the screen.\nTo color a line, use the stroke function. A line cannot be filled,\ntherefore the fill function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe strokeWeight function.", "rendered": "Draws a line (a direct path between two points) to the screen.\nTo color a line, use the <code>stroke</code> function. A line cannot be filled,\ntherefore the <code>fill</code> function will not affect the color of a line. Lines are\ndrawn with a width of one pixel by default, but this can be changed with\nthe <code>strokeWeight</code> function.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-line", "title": "line", "contents": "line int int int int glEnvT unit p1 p2 ", "rendered": "<h4 class='item'>let line = (\n  ~p1: (int, int),\n  ~p2: (int, int),\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-background", "title": "background", "contents": "The background function sets the color used for the background of the\nProcessing window. The default background is black. This function is\ntypically used within draw to clear the display window at the beginning of\neach frame, but it can be used inside setup to set the background on the\nfirst frame of animation or if the backgound need only be set once.", "rendered": "The <code>background</code> function sets the color used for the background of the\nProcessing window. The default background is black. This function is\ntypically used within <code>draw</code> to clear the display window at the beginning of\neach frame, but it can be used inside <code>setup</code> to set the background on the\nfirst frame of animation or if the backgound need only be set once.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-background", "title": "background", "contents": "background colorT glEnvT unit  ", "rendered": "<h4 class='item'>let background = (<a href=\"./api/Reprocessing_Types.html#type-Types.colorT\" title=\"Reprocessing_Types.Types.colorT\">colorT</a>, <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-clear", "title": "clear", "contents": "Clears the entire screen. Normally, background is used for this purpose,\nclear will have different results in web and native.", "rendered": "Clears the entire screen. Normally, background is used for this purpose,\nclear will have different results in web and native.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-clear", "title": "clear", "contents": "clear glEnvT unit ", "rendered": "<h4 class='item'>let clear = <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a> => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectf", "title": "rectf", "contents": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "rendered": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rectf", "title": "rectf", "contents": "rectf float float float float glEnvT unit pos width height ", "rendered": "<h4 class='item'>let rectf = (\n  ~pos: (float, float),\n  ~width: float,\n  ~height: float,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": "This is the same as rectf, but converts all its integer arguments to floats\nas a convenience.", "rendered": "This is the same as <code>rectf</code>, but converts all its integer arguments to floats\nas a convenience.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "rendered": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#value-rect", "title": "rect", "contents": "rect int int int int glEnvT unit pos width height ", "rendered": "<h4 class='item'>let rect = (\n  ~pos: (int, int),\n  ~width: int,\n  ~height: int,\n  <a href=\"./api/Reprocessing_Types.html#type-Types.glEnvT\" title=\"Reprocessing_Types.Types.glEnvT\">glEnvT</a>\n) => unit</h4>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "Reprocessing_Draw", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#Matrix-transform-operations", "title": "Matrix/transform operations", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#Images", "title": "Images", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#Text", "title": "Text", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#Style-operations", "title": "Style operations", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#Core-drawing-operations", "title": "Core drawing operations", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "code block", "contents": "fill(Constants.red, env);\nrect(~pos=Env.mouse(env), ~width=5, ~height=5, env);", "rendered": "<pre><code>fill(Constants.red, env);\nrect(~pos=Env.mouse(env), ~width=5, ~height=5, env);</code></pre>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "code block", "contents": "open Reprocessing;\nopen Draw;\nrun(~setup=env => Env.size(~width=200, ~height=200, env), ~draw=((), env) => {\n%{code}%\n}, ())", "rendered": "<pre><code>open Reprocessing;\nopen Draw;\nrun(~setup=env => Env.size(~width=200, ~height=200, env), ~draw=((), env) => {\n%{code}%\n}, ())</code></pre>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "code block", "contents": "[@bs.val] external sandboxCanvasId: string = \"\";\n[@bs.val] external sandboxCanvas: 'canvas = \"\";\n[@bs.val] external containerDiv: 'node = \"\";\n[@bs.send] external addEventListener: ('node, string, 'eventT => unit) => unit = \"addEventListener\";\nlet id = sandboxCanvasId;\naddEventListener(containerDiv, \"mouseleave\", (_) => Reprocessing.playPause(id, false) |> ignore);\naddEventListener(containerDiv, \"mouseenter\", (_) => Reprocessing.playPause(id, true) |> ignore);\nReprocessing.setScreenId(sandboxCanvasId);", "rendered": "<pre><code>[@bs.val] external sandboxCanvasId: string = \"\";\n[@bs.val] external sandboxCanvas: 'canvas = \"\";\n[@bs.val] external containerDiv: 'node = \"\";\n[@bs.send] external addEventListener: ('node, string, 'eventT => unit) => unit = \"addEventListener\";\nlet id = sandboxCanvasId;\naddEventListener(containerDiv, \"mouseleave\", (_) => Reprocessing.playPause(id, false) |> ignore);\naddEventListener(containerDiv, \"mouseenter\", (_) => Reprocessing.playPause(id, true) |> ignore);\nReprocessing.setScreenId(sandboxCanvasId);</code></pre>", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html", "title": "Reprocessing_Draw", "contents": "This is where all the fancy things happen.", "rendered": "This is where all the fancy things happen.", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_Draw.html#The-Draw-module", "title": "The Draw module", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Draw"},
{"href": "./api/Reprocessing_DefaultFont.html#value-read", "title": "read", "contents": "read string option string ", "rendered": "<h4 class='item'>let read = string => option(string)</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-size", "title": "size", "contents": "size string option int64 ", "rendered": "<h4 class='item'>let size = string => option(int64)</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-file_list", "title": "file_list", "contents": "file_list list string", "rendered": "<h4 class='item'>let file_list = list(string)</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.size", "title": "Internal.size", "contents": "size string option int64 ", "rendered": "<h4 class='item'>let size = string => option(int64)</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.file_list", "title": "Internal.file_list", "contents": "file_list list string", "rendered": "<h4 class='item'>let file_list = list(string)</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.file_chunks", "title": "Internal.file_chunks", "contents": "file_chunks string option list string ", "rendered": "<h4 class='item'>let file_chunks = string => option(list(string))</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.d_37e5d986c886a357d80b4e7e80cfb0bc", "title": "Internal.d_37e5d986c886a357d80b4e7e80cfb0bc", "contents": "d_37e5d986c886a357d80b4e7e80cfb0bc string", "rendered": "<h4 class='item'>let d_37e5d986c886a357d80b4e7e80cfb0bc = string</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.d_0118d93503fb26f597f0e4924d5b8c0d", "title": "Internal.d_0118d93503fb26f597f0e4924d5b8c0d", "contents": "d_0118d93503fb26f597f0e4924d5b8c0d string", "rendered": "<h4 class='item'>let d_0118d93503fb26f597f0e4924d5b8c0d = string</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.d_8f72a8e66d30e2a8b44b5f50ccb81b54", "title": "Internal.d_8f72a8e66d30e2a8b44b5f50ccb81b54", "contents": "d_8f72a8e66d30e2a8b44b5f50ccb81b54 string", "rendered": "<h4 class='item'>let d_8f72a8e66d30e2a8b44b5f50ccb81b54 = string</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.d_096bc231ae663e6b83097c210f8a7ac4", "title": "Internal.d_096bc231ae663e6b83097c210f8a7ac4", "contents": "d_096bc231ae663e6b83097c210f8a7ac4 string", "rendered": "<h4 class='item'>let d_096bc231ae663e6b83097c210f8a7ac4 = string</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.d_d89d4399cabd0fbbf0c369ca8c93e2a0", "title": "Internal.d_d89d4399cabd0fbbf0c369ca8c93e2a0", "contents": "d_d89d4399cabd0fbbf0c369ca8c93e2a0 string", "rendered": "<h4 class='item'>let d_d89d4399cabd0fbbf0c369ca8c93e2a0 = string</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#value-Internal.d_a647e4659c173b8e2a1beed6e11eefcd", "title": "Internal.d_a647e4659c173b8e2a1beed6e11eefcd", "contents": "d_a647e4659c173b8e2a1beed6e11eefcd string", "rendered": "<h4 class='item'>let d_a647e4659c173b8e2a1beed6e11eefcd = string</h4>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#module-Internal", "title": "Internal", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#module-Internal", "title": "Internal", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html", "title": "Reprocessing_DefaultFont", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html", "title": "Reprocessing_DefaultFont", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_DefaultFont.html#Reprocessing_DefaultFont", "title": "Reprocessing_DefaultFont", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_DefaultFont"},
{"href": "./api/Reprocessing_Constants.html#value-tau", "title": "tau", "contents": "tau float", "rendered": "<h4 class='item'>let tau = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-two_pi", "title": "two_pi", "contents": "two_pi float", "rendered": "<h4 class='item'>let two_pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-quarter_pi", "title": "quarter_pi", "contents": "quarter_pi float", "rendered": "<h4 class='item'>let quarter_pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-half_pi", "title": "half_pi", "contents": "half_pi float", "rendered": "<h4 class='item'>let half_pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-pi", "title": "pi", "contents": "pi float", "rendered": "<h4 class='item'>let pi = float</h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-blue", "title": "blue", "contents": "blue colorT", "rendered": "<h4 class='item'>let blue = <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-green", "title": "green", "contents": "green colorT", "rendered": "<h4 class='item'>let green = <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-red", "title": "red", "contents": "red colorT", "rendered": "<h4 class='item'>let red = <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-black", "title": "black", "contents": "black colorT", "rendered": "<h4 class='item'>let black = <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#value-white", "title": "white", "contents": "white colorT", "rendered": "<h4 class='item'>let white = <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html", "title": "Reprocessing_Constants", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html", "title": "Reprocessing_Constants", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Constants.html#Reprocessing_Constants", "title": "Reprocessing_Constants", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Constants"},
{"href": "./api/Reprocessing_Common.html#value-split", "title": "split", "contents": "split string char list string  sep", "rendered": "<h4 class='item'>let split = (string, ~sep: char) => list(string)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-append_char", "title": "append_char", "contents": "append_char string char string  ", "rendered": "<h4 class='item'>let append_char = (string, char) => string</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-read", "title": "read", "contents": "read string string ", "rendered": "<h4 class='item'>let read = string => string</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.create", "title": "Stream.create", "contents": "create string t ", "rendered": "<h4 class='item'>let create = string => <a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a></h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.charsRemaining", "title": "Stream.charsRemaining", "contents": "charsRemaining string int int ", "rendered": "<h4 class='item'>let charsRemaining = (string, int) => int</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.match_", "title": "Stream.match_", "contents": "match_ string int string string int  ", "rendered": "<h4 class='item'>let match_ = ((string, int), string) => (string, int)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.popn", "title": "Stream.popn", "contents": "popn int int int  ", "rendered": "<h4 class='item'>let popn = (('a, int), int) => ('a, int)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.skipWhite", "title": "Stream.skipWhite", "contents": "skipWhite t t ", "rendered": "<h4 class='item'>let skipWhite = <a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a> => <a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a></h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.peekn", "title": "Stream.peekn", "contents": "peekn string int int option string  ", "rendered": "<h4 class='item'>let peekn = ((string, int), int) => option(string)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.popch", "title": "Stream.popch", "contents": "popch t t ", "rendered": "<h4 class='item'>let popch = <a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a> => <a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a></h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.peekch", "title": "Stream.peekch", "contents": "peekch t option char ", "rendered": "<h4 class='item'>let peekch = <a href=\"./api/Reprocessing_Common.html#type-Stream.t\">t</a> => option(char)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-Stream.empty", "title": "Stream.empty", "contents": "empty list", "rendered": "<h4 class='item'>let empty = list('a)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-Stream.t", "title": "Stream.t", "contents": "t string int", "rendered": "<h4 class='item'>type t = (string, int)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#module-Stream", "title": "Stream", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#module-Stream", "title": "Stream", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-glEnv", "title": "glEnv", "contents": "glEnv camera glCamera window Reasongl Gl Window t gl Reasongl Gl contextT vertexBuffer Reasongl Gl bufferT elementBuffer Reasongl Gl bufferT aVertexColor Reasongl Gl attributeT aTextureCoord Reasongl Gl attributeT aVertexPosition Reasongl Gl attributeT pMatrixUniform Reasongl Gl uniformT uSampler Reasongl Gl uniformT batch batchT keyboard keyboardT mouse mouseT style styleT styleStack list styleT frame frameT matrix array float matrixStack list array float size sizeT", "rendered": "<h4 class='item'>type glEnv = {\n  camera: <a href=\"./api/Reprocessing_Common.html#type-glCamera\">glCamera</a>,\n  window: Reasongl.Gl.Window.t,\n  gl: Reasongl.Gl.contextT,\n  vertexBuffer: Reasongl.Gl.bufferT,\n  elementBuffer: Reasongl.Gl.bufferT,\n  aVertexColor: Reasongl.Gl.attributeT,\n  aTextureCoord: Reasongl.Gl.attributeT,\n  aVertexPosition: Reasongl.Gl.attributeT,\n  pMatrixUniform: Reasongl.Gl.uniformT,\n  uSampler: Reasongl.Gl.uniformT,\n  batch: <a href=\"./api/Reprocessing_Common.html#type-batchT\">batchT</a>,\n  keyboard: <a href=\"./api/Reprocessing_Common.html#type-keyboardT\">keyboardT</a>,\n  mouse: <a href=\"./api/Reprocessing_Common.html#type-mouseT\">mouseT</a>,\n  mut style: <a href=\"./api/Reprocessing_Common.html#type-styleT\">styleT</a>,\n  mut styleStack: list(<a href=\"./api/Reprocessing_Common.html#type-styleT\">styleT</a>),\n  mut frame: <a href=\"./api/Reprocessing_Common.html#type-frameT\">frameT</a>,\n  mut matrix: array(float),\n  mut matrixStack: list(array(float)),\n  size: <a href=\"./api/Reprocessing_Common.html#type-sizeT\">sizeT</a>\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-batchT", "title": "batchT", "contents": "batchT vertexArray Reasongl Gl Bigarray t float Reasongl Gl Bigarray float32_elt elementArray Reasongl Gl Bigarray t int Reasongl Gl Bigarray int16_unsigned_elt vertexPtr int elementPtr int currTex option Reasongl Gl textureT nullTex Reasongl Gl textureT", "rendered": "<h4 class='item'>type batchT = {\n  vertexArray: Reasongl.Gl.Bigarray.t(\n    float,\n    Reasongl.Gl.Bigarray.float32_elt\n  ),\n  elementArray: Reasongl.Gl.Bigarray.t(\n    int,\n    Reasongl.Gl.Bigarray.int16_unsigned_elt\n  ),\n  mut vertexPtr: int,\n  mut elementPtr: int,\n  mut currTex: option(Reasongl.Gl.textureT),\n  nullTex: Reasongl.Gl.textureT\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-soundT", "title": "soundT", "contents": "soundT Pervasives ref soundLoadStatusT", "rendered": "<h4 class='item'>type soundT = Pervasives.ref(<a href=\"./api/Reprocessing_Common.html#type-soundLoadStatusT\">soundLoadStatusT</a>)</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-soundLoadStatusT", "title": "soundLoadStatusT", "contents": "soundLoadStatusT float bool Reasongl Gl Audio t", "rendered": "<h4 class='item'>type soundLoadStatusT = \n  | Loading\n  | ShouldPlay(float, bool)\n  | Loaded(Reasongl.Gl.Audio.t)\n</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-imageT", "title": "imageT", "contents": "imageT glData option _imageT drawnTo bool", "rendered": "<h4 class='item'>type imageT = {\n  mut glData: option(<a href=\"./api/Reprocessing_Common.html#type-_imageT\">_imageT</a>),\n  mut drawnTo: bool\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-_imageT", "title": "_imageT", "contents": "_imageT framebuffer option Reasongl Gl framebufferT texture Reasongl Gl textureT height int width int", "rendered": "<h4 class='item'>type _imageT = {\n  framebuffer: option(Reasongl.Gl.framebufferT),\n  texture: Reasongl.Gl.textureT,\n  height: int,\n  width: int\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-vertexSize", "title": "vertexSize", "contents": "vertexSize int", "rendered": "<h4 class='item'>let vertexSize = int</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#value-circularBufferSize", "title": "circularBufferSize", "contents": "circularBufferSize int", "rendered": "<h4 class='item'>let circularBufferSize = int</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-sizeT", "title": "sizeT", "contents": "sizeT height int width int resizeable bool", "rendered": "<h4 class='item'>type sizeT = {\n  mut height: int,\n  mut width: int,\n  mut resizeable: bool\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-frameT", "title": "frameT", "contents": "frameT count int rate int deltaTime float", "rendered": "<h4 class='item'>type frameT = {count: int, rate: int, deltaTime: float}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-keyboardT", "title": "keyboardT", "contents": "keyboardT keyCode keycodeT pressed KeySet t released KeySet t down KeySet t", "rendered": "<h4 class='item'>type keyboardT = {\n  mut keyCode: <a href=\"./api/Reprocessing_Events.html#type-keycodeT\" title=\"Reprocessing_Events.keycodeT\">keycodeT</a>,\n  mut pressed: <a href=\"./api/Reprocessing_Common.html#module-KeySet\">KeySet</a>.<a href=\"./api/Reprocessing_Common.html#type-KeySet.t\">t</a>,\n  mut released: <a href=\"./api/Reprocessing_Common.html#module-KeySet\">KeySet</a>.<a href=\"./api/Reprocessing_Common.html#type-KeySet.t\">t</a>,\n  mut down: <a href=\"./api/Reprocessing_Common.html#module-KeySet\">KeySet</a>.<a href=\"./api/Reprocessing_Common.html#type-KeySet.t\">t</a>\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-mouseT", "title": "mouseT", "contents": "mouseT pos int int prevPos int int pressed bool", "rendered": "<h4 class='item'>type mouseT = {\n  mut pos: (int, int),\n  mut prevPos: (int, int),\n  mut pressed: bool\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-styleT", "title": "styleT", "contents": "styleT strokeColor option colorT strokeWeight int strokeCap strokeCapT fillColor option colorT tintColor option colorT rectMode rectModeT", "rendered": "<h4 class='item'>type styleT = {\n  strokeColor: option(<a href=\"./api/Reprocessing_Common.html#type-colorT\">colorT</a>),\n  strokeWeight: int,\n  strokeCap: <a href=\"./api/Reprocessing_Common.html#type-strokeCapT\">strokeCapT</a>,\n  fillColor: option(<a href=\"./api/Reprocessing_Common.html#type-colorT\">colorT</a>),\n  tintColor: option(<a href=\"./api/Reprocessing_Common.html#type-colorT\">colorT</a>),\n  rectMode: <a href=\"./api/Reprocessing_Common.html#type-rectModeT\">rectModeT</a>\n}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-colorT", "title": "colorT", "contents": "colorT r float g float b float a float", "rendered": "<h4 class='item'>type colorT = {r: float, g: float, b: float, a: float}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-glCamera", "title": "glCamera", "contents": "glCamera projectionMatrix Reasongl Gl Mat4 t", "rendered": "<h4 class='item'>type glCamera = {projectionMatrix: Reasongl.Gl.Mat4.t}</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-glState", "title": "glState", "contents": "glState Reasongl Gl Window t", "rendered": "<h4 class='item'>type glState = Reasongl.Gl.Window.t</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-rectModeT", "title": "rectModeT", "contents": "rectModeT ", "rendered": "<h4 class='item'>type rectModeT = | Corner | Center | Radius\n</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#type-strokeCapT", "title": "strokeCapT", "contents": "strokeCapT ", "rendered": "<h4 class='item'>type strokeCapT = | Round | Square | Project\n</h4>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html", "title": "Reprocessing_Common", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html", "title": "Reprocessing_Common", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing_Common.html#Reprocessing_Common", "title": "Reprocessing_Common", "contents": "", "rendered": "", "breadcrumb": "Reprocessing_Common"},
{"href": "./api/Reprocessing.html#type-soundT", "title": "soundT", "contents": "soundT soundT", "rendered": "<h4 class='item'>type soundT = <a href=\"./api/Reprocessing_Common.html#type-soundT\" title=\"Reprocessing_Common.soundT\">soundT</a></h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-rectModeT", "title": "rectModeT", "contents": "rectModeT rectModeT", "rendered": "<h4 class='item'>type rectModeT = <a href=\"./api/Reprocessing_Common.html#type-rectModeT\" title=\"Reprocessing_Common.rectModeT\">rectModeT</a></h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-strokeCapT", "title": "strokeCapT", "contents": "strokeCapT strokeCapT", "rendered": "<h4 class='item'>type strokeCapT = <a href=\"./api/Reprocessing_Common.html#type-strokeCapT\" title=\"Reprocessing_Common.strokeCapT\">strokeCapT</a></h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-fontT", "title": "fontT", "contents": "fontT fontT", "rendered": "<h4 class='item'>type fontT = <a href=\"./api/Reprocessing_Font.html#type-fontT\" title=\"Reprocessing_Font.fontT\">fontT</a></h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-imageT", "title": "imageT", "contents": "imageT imageT", "rendered": "<h4 class='item'>type imageT = <a href=\"./api/Reprocessing_Common.html#type-imageT\" title=\"Reprocessing_Common.imageT\">imageT</a></h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-colorT", "title": "colorT", "contents": "colorT colorT", "rendered": "<h4 class='item'>type colorT = <a href=\"./api/Reprocessing_Common.html#type-colorT\" title=\"Reprocessing_Common.colorT\">colorT</a></h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#type-glEnvT", "title": "glEnvT", "contents": "glEnvT glEnv", "rendered": "<h4 class='item'>type glEnvT = <a href=\"./api/Reprocessing_Common.html#type-glEnv\" title=\"Reprocessing_Common.glEnv\">glEnv</a></h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-playPause", "title": "playPause", "contents": "Calling this function will not necessarily change the state. Inspect the result to determine success.", "rendered": "Calling this function will not necessarily change the state. Inspect the result to determine success.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-playPause", "title": "playPause", "contents": "The return value indicates the status:", "rendered": "The return value indicates the status:", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-playPause", "title": "playPause", "contents": "Play/pause the screen specified by the given ID. If you pass true, it will try to play it, otherwise pause.", "rendered": "Play/pause the screen specified by the given ID. If you pass true, it will try to play it, otherwise pause.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-playPause", "title": "playPause", "contents": "playPause string bool option bool  ", "rendered": "<h4 class='item'>let playPause = (string, bool) => option(bool)</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-clearScreenId", "title": "clearScreenId", "contents": "clearScreenId unit unit ", "rendered": "<h4 class='item'>let clearScreenId = unit => unit</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "code block", "contents": "# let _ = (setup, draw) => {\nReprocessing.setScreenId(\"my-fancy-id\");\n/* This will render to the canvas with id \"my-fancy-id\" */\nReprocessing.run(~setup, ~draw, ());\n# }", "rendered": "<pre><code># let _ = (setup, draw) => {\nReprocessing.setScreenId(\"my-fancy-id\");\n/* This will render to the canvas with id \"my-fancy-id\" */\nReprocessing.run(~setup, ~draw, ());\n# }</code></pre>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-setScreenId", "title": "setScreenId", "contents": "If a canvas exists on the document with the given ID, then that canvas will be used. Otherwise a canvas will be created &amp; appended to the body.", "rendered": "If a canvas exists on the document with the given ID, then that canvas will be used. Otherwise a canvas will be created &amp; appended to the body.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-setScreenId", "title": "setScreenId", "contents": "Set the ID that will be used by subsequent calls to run() that don&#39;t have an explicitly-passed ~screen.", "rendered": "Set the ID that will be used by subsequent calls to <code>run()</code> that don&#39;t have an explicitly-passed <code>~screen</code>.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-setScreenId", "title": "setScreenId", "contents": "setScreenId string unit ", "rendered": "<h4 class='item'>let setScreenId = string => unit</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-hotreload", "title": "hotreload", "contents": "hotreload option string string bool screen ", "rendered": "<h4 class='item'>let hotreload = (~?screen: option(string), string) => bool</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#value-run", "title": "run", "contents": "run glEnvT  option string option glEnvT   option glEnvT   option glEnvT   option glEnvT   option glEnvT   option glEnvT   option glEnvT   option glEnvT   unit unit setup screen draw mouseMove mouseDragged mouseDown mouseUp keyPressed keyReleased keyTyped ", "rendered": "<h4 class='item'>let run = (\n  ~setup: <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a> => 'a,\n  ~?screen: option(string),\n  ~?draw: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  ~?mouseMove: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  ~?mouseDragged: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  ~?mouseDown: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  ~?mouseUp: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  ~?keyPressed: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  ~?keyReleased: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  ~?keyTyped: option(('a, <a href=\"./api/Reprocessing.html#type-glEnvT\">glEnvT</a>) => 'a),\n  unit\n) => unit</h4>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "@includes", "rendered": "@includes", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "(only supported on web target)", "rendered": "(only supported on web target)", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#Handling-Multiple-Canvases", "title": "Handling Multiple Canvases", "contents": "", "rendered": "", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "The following modules are included here as a psuedo namespacing function. It is common to open Reprocessing and then access them as Draw.rect, etc.", "rendered": "The following modules are included here as a psuedo namespacing function. It is common to <code>open Reprocessing</code> and then access them as <code>Draw.rect</code>, etc.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#Misc-helpers", "title": "Misc helpers", "contents": "", "rendered": "", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "code block", "contents": "Reprocessing.hotreload(\"./index.re\")", "rendered": "<pre><code>Reprocessing.hotreload(\"./index.re\")</code></pre>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "Put the following in an indexhot.re", "rendered": "Put the following in an <code>indexhot.re</code>", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#Hot-reloading", "title": "Hot reloading", "contents": "", "rendered": "", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html", "title": "Reprocessing", "contents": "This is how all of your programs start. At minimum you need a setup function, but it also doesn&#39;t make much sense to not have a draw function.", "rendered": "This is how all of your programs start. At minimum you need a setup function, but it also doesn&#39;t make much sense to not have a draw function.", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#The-Run-Function", "title": "The Run Function", "contents": "", "rendered": "", "breadcrumb": "Reprocessing"},
{"href": "./api/Reprocessing.html#Reprocessing", "title": "Reprocessing", "contents": "", "rendered": "", "breadcrumb": "Reprocessing"}]